"""Data class containing configuration settings."""
from __future__ import annotations

__all__ = [
    "ProxySettings",
    "HTTPTimeoutSettings",
    "HTTPSettings",
    "CacheComponents",
    "CacheSettings",
]

from typing import Optional, Union
import enum
import attr
import yarl
import ssl as ssl_


def _ssl_factory(value: Union[bool, ssl_.SSLContext]) -> ssl_.SSLContext:
    if not isinstance(value, bool):
        return value

    ssl = ssl_.create_default_context()
    # We can't turn SSL verification off without disabling hostname verification first.
    # If we are using verification, this will just leave it enabled, so it is fine.
    ssl.check_hostname = value
    ssl.verify_mode = ssl_.CERT_REQUIRED if value else ssl_.CERT_NONE
    return ssl


class ProxySettings:
    """Settings for configuring an HTTP-based proxy."""

    headers: Optional[dict[str, str]] = None
    """Additional headers to use for requests via a proxy, if required."""

    url: Union[None, str, yarl.URL] = None
    """Proxy URL to use.

    Defaults to `None` which disables the use of an explicit proxy.

    Returns
    -------
    Union[None, str, yarl.URL]
        The proxy URL to use, or `None` to disable it.
    """

    @property
    def all_headers(self) -> Optional[dict[str, str]]:
        """Return all proxy headers.

        Returns
        -------
        Optional[dict[str,str]]
            Any headers that are set, or `None` if no headers are to
            be sent with any request.
        """
        if self.headers is None:
            return None
        return {**self.headers}


class HTTPTimeoutSettings:
    """Settings to control HTTP request timeouts."""

    acquire_and_connect: Optional[float] = None
    """Timeout for `request_socket_connect` PLUS connection acquisition.

    By default, this has no timeout allocated.

    Returns
    -------
    Optional[float]
        The timeout, or `None` to disable it.
    """

    request_socket_connect: Optional[float] = None
    """Timeout for connecting a socket.

    By default, this has no timeout allocated.

    Returns
    -------
    Optional[float]
        The timeout, or `None` to disable it.
    """

    request_socket_read: Optional[float] = None
    """Timeout for reading a socket.

    By default, this has no timeout allocated.

    Returns
    -------
    Optional[float]
        The timeout, or `None` to disable it.
    """

    total: Optional[float] = 30.0
    """Total timeout for entire request.

    By default, this has a 30 second timeout allocated.

    Returns
    -------
    Optional[float]
        The timeout, or `None` to disable it.
    """


class HTTPSettings:
    """Settings to control HTTP clients."""

    max_redirects: Optional[int] = 10
    """Behavior for handling redirect HTTP responses.

    If a `int`, allow following redirects from `3xx` HTTP responses
    for up to this many redirects. Exceeding this value will raise an
    exception.

    If `None`, then disallow any redirects.
    The default is to disallow this behavior for security reasons.
    Generally, it is safer to keep this disabled. You may find a case in the
    future where you need to enable this if Discord change their URL without
    warning.

    -- note
        This will only apply to the REST API. WebSockets remain unaffected
        by any value set here.

    Returns
    -------
    Optional[int]
        The number of redirects to allow at a maximum per request.

        `None` disables the handling
        of redirects and will result in exceptions being raised instead
        should one occur.
    """

    ssl: ssl_.SSLContext = _ssl_factory(True)
    """SSL context to use.

    This may be __assigned__ a `bool` or an `ssl.SSLContext` object.

    If assigned to `True`, a default SSL context is generated by
    this class that will enforce SSL verification. This is then stored in
    this field.

    If `False`, then a default SSL context is generated by this
    class that will **NOT** enforce SSL verification. This is then stored
    in this field.

    If an instance of `ssl.SSLContext`, then this context will be used.

    -- warning
        Setting a custom value here may have security implications, or
        may result in the application being unable to connect to Revolt
        at all.
    -- warning
        Disabling SSL verification is almost always unadvised. This
        is because your application will no longer check whether you are
        connecting to Revolt, or to some third party spoof designed
        to steal personal credentials such as your application token.

        There may be cases where SSL certificates do not get updated,
        and in this case, you may find that disabling this explicitly
        allows you to work around any issues that are occurring, but
        you should immediately seek a better solution where possible
        if any form of personal security is in your interest.

    Returns
    -------
    ssl.SSLContext
        The SSL context to use for this application.
    """

    timeouts: HTTPTimeoutSettings = HTTPTimeoutSettings
    """Settings to control HTTP request timeouts.

    The behaviour if this is not explicitly defined is to use sane
    defaults that are most efficient for optimal use of this library.

    Returns
    -------
    HTTPTimeoutSettings
        The HTTP timeout settings to use for connection timeouts.
    """


class CacheComponents(enum.Flag):
    """Flags to control the cache components."""

    NONE = 0
    """Disables the cache."""

    SERVERS = 1 << 0
    """Enables the guild cache."""

    SERVER_CHANNELS = 1 << 1
    """Enables the guild channels cache."""

    MEMBERS = 1 << 2
    """Enables the members cache."""

    ROLES = 1 << 3
    """Enables the roles cache."""

    INVITES = 1 << 4
    """Enables the invites cache."""

    MESSAGES = 1 << 5
    """Enables the messages cache."""

    DM_CHANNEL_IDS = 1 << 6
    """Enables the DM channel IDs cache."""

    ALL = (
        SERVERS
        | SERVER_CHANNELS
        | MEMBERS
        | ROLES
        | INVITES
        | MESSAGES
        | DM_CHANNEL_IDS
    )
    """Fully enables the cache."""


class CacheSettings:
    """Settings to control the cache."""

    components: CacheComponents = attr.field(default=CacheComponents.ALL)
    """The cache components to use.

    Defaults to `CacheComponents.ALL`.
    """

    max_messages: int = attr.field(default=300)
    """The maximum number of messages to store in the cache at once.

    This will have no effect if the messages cache is not enabled.

    Defaults to `300`.
    """

    max_dm_channel_ids: int = attr.field(default=50)
    """The maximum number of channel IDs to store in the cache at once.

    This will have no effect if the channel IDs cache is not enabled.

    Defaults to `50`.
    """
